Based on the assumptions, we will need the following classes and functions:

1. `Game` class: This will be the main class that controls the game flow. It will have methods to start the game, get the player's choice, get the computer's choice, determine the winner, and display the result.

2. `Player` class: This will represent the player. It will have methods to get the player's choice.

3. `Computer` class: This will represent the computer. It will have methods to get the computer's choice.

4. `test_game.py`: This will contain the unit tests for the game. It will test the game logic and the game outcome.

Now, let's write the code for each file.

game.py
```python
import random

class Player:
    def get_choice(self):
        choice = input("Enter your choice (rock, paper, scissors): ")
        return choice

class Computer:
    def get_choice(self):
        choices = ["rock", "paper", "scissors"]
        return random.choice(choices)

class Game:
    def __init__(self):
        self.player = Player()
        self.computer = Computer()

    def start(self):
        player_choice = self.player.get_choice()
        computer_choice = self.computer.get_choice()

        print(f"You chose {player_choice}, computer chose {computer_choice}.")

        if player_choice == computer_choice:
            print("It's a draw!")
        elif (player_choice == "rock" and computer_choice == "scissors") or \
             (player_choice == "scissors" and computer_choice == "paper") or \
             (player_choice == "paper" and computer_choice == "rock"):
            print("You win!")
        else:
            print("You lose!")

if __name__ == "__main__":
    game = Game()
    game.start()
```

test_game.py
```python
import pytest
from game import Game, Player, Computer

def test_game_logic():
    game = Game()

    game.player.get_choice = lambda: "rock"
    game.computer.get_choice = lambda: "scissors"
    assert game.start() == "You win!"

    game.player.get_choice = lambda: "rock"
    game.computer.get_choice = lambda: "paper"
    assert game.start() == "You lose!"

    game.player.get_choice = lambda: "rock"
    game.computer.get_choice = lambda: "rock"
    assert game.start() == "It's a draw!"

def test_game_outcome():
    game = Game()

    game.player.get_choice = lambda: "rock"
    game.computer.get_choice = lambda: "scissors"
    assert game.start() == "You win!"

    game.player.get_choice = lambda: "rock"
    game.computer.get_choice = lambda: "paper"
    assert game.start() == "You lose!"

    game.player.get_choice = lambda: "rock"
    game.computer.get_choice = lambda: "rock"
    assert game.start() == "It's a draw!"
```

requirements.txt
```txt
pytest==6.2.4
```

To run the game, you would use the command `python game.py`. To run the tests, you would use the command `pytest test_game.py`.